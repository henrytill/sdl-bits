name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        lfs: true
        submodules: recursive

    - name: Cache deps directory
      id: cache-deps
      uses: actions/cache@v3
      env:
        cache-name: cache-deps
      with:
        path: ~/deps
        key: ${{ runner.os }}-build-${{ env.cache-name }}-v0

    - if: ${{ steps.cache-deps.outputs.cache-hit == false }}
      name: Create deps directory
      run: |
        mkdir -p $HOME/deps

    - if: ${{ steps.cache-deps.outputs.cache-hit == false }}
      name: Build SDL2
      run: |
        pushd $HOME/deps
        curl -LO https://github.com/libsdl-org/SDL/releases/download/release-2.0.20/SDL2-2.0.20.tar.gz
        tar xvzf SDL2-2.0.20.tar.gz
        cd SDL2-2.0.20
        ./configure
        make
        popd

    - name: Install SDL2
      run: |
        pushd $HOME/deps/SDL2-2.0.20
        sudo make install
        popd

    - if: ${{ steps.cache-deps.outputs.cache-hit == false }}
      name: Build SDL2_ttf
      run: |
        pushd $HOME/deps
        curl -LO https://github.com/libsdl-org/SDL_ttf/releases/download/release-2.0.18/SDL2_ttf-2.0.18.tar.gz
        tar xvzf SDL2_ttf-2.0.18.tar.gz
        cd SDL2_ttf-2.0.18
        ./configure
        make
        popd

    - name: Install SDL2_ttf
      run: |
        pushd $HOME/deps/SDL2_ttf-2.0.18
        sudo make install
        popd

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_SHARED_LIBS=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
